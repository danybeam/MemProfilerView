// ReSharper disable CppClassCanBeFinal
#pragma once

#include <Clay/clay.h>
#include <SDL_events.h>
#include <flecs.h>
#include <memory>
#include <raylib.h>

import IOState;
import Maths;
import ProfilingRenderer;

/**
 * @nosubgrouping
 *
 * Framework namespace.
 * Intentionally intended to be non-descriptive.
 * Ideally it would be renamed per project.
 */
namespace fw
{
    /**
     * Core version of the framework.
     * As of right now this should be multiplatform but if OS specific implementations are required
     * they would inherit from this.
     * 
     * Intentionally intended to be non-descriptive.
     * Ideally it would be renamed per project.
     */
    class FWCore // NOLINT(cppcoreguidelines-special-member-functions) 
    {
    public:
        /**
         * Enum to indicate which error(s) happened while initializing the framework.
         */
        enum ERRORCODES : uint8_t
        {
            NONE = 0,
            CLAY_INIT_ERROR = 1 << 0,
            SDL_INIT_ERROR = 1 << 1,
        };

        /**
         * @name Control methods
         * @{
         */
        /**
         * Build and initialize the framework
         * @param width Width of the window in pixels
         * @param height Height of the window in pixels
         */
        FWCore(uint32_t width, uint32_t height);

        /**
         * Destroy and shutdown the framework
         */
        virtual ~FWCore();

        /**
         * Start running the framework and update the flecs world. This is where the main program/main loop happens.
         * @param world unique pointer pointing to the flecs world
         * @return exit code of the program.
         */
        uint32_t Run(std::unique_ptr<flecs::world>&& world);

        /**
         * @}
         *
         * @name Initializers
         * @{
         */

    private:
        /**
         * Initialize the framework object
         * @return The error code of the initialization process
         */
        uint8_t Init();

        /**
         * Initialize the clay environment
         * @return Whether clay got initialized properly
         */
        bool InitClay();

        /**
         * Initialize SDL
         * @return Whether SDL got initialized properly
         */
        bool InitSDL();

        /**
         * @}
         * 
         * @name Shutdown
         * @{
         */

        /**
         * Shutdown the framework 
         */
        void Shutdown();

        /**
         * Shutdown clay and clean up the memory arena 
         */
        void ShutdownClay();

        /**
         * Shutdown SDL and free the event watcher
         */
        void ShutdownSDL();

        /**
         * @}
         *
         * @name Framework callbacks
         * @{
         */

        /**
         * Handler for clay errors
         * @param err The error data generated by clay
         */
        static void Clay_errorHandlerFunction(Clay_ErrorData err);

        /**
         * Static version of the event handler function. This is the one that gets registered as the SDL event handler
         * with a pointer to the instantiated framework pointer.
         *
         * @remark While more could theoretically be added but for most event handling should be done in the non-static version.
         * 
         * @param userData void pointer to the framework pointer to attach the framework to,
         * @param event Pointer to the event to be processed
         * @return whether the event got processed properly
         */
        static bool ProcessSDLEvent_wrapper(void* userData, SDL_Event* event);

        /**
         * The instantiated function doing the event processing.
         * 
         * @param event Pointer to the event to be handled
         * @return whether the event got handled properly
         */
        bool ProcessSDLEvent(SDL_Event* event);

        /**
         * Flecs system callback to update the state of IO devices for Clay's consumption in other modules.
         * @param iter flecs iterator
         * @param ioState_component component containing the information regarding the state of IO devices 
         */
        void Clay_updateIOState(flecs::iter& iter, size_t, mem_profile_viewer::IOState_Component& ioState_component);

        /**
         * Flecs system callback to start registering Clay render commands
         * @param iter flecs iterator
         */
        static void Clay_startDrawing(flecs::iter& iter, size_t);

        /**
         * Flecs system callback to actualize all the render commands and render with raylib
         * @param iter flecs iterator
         * @param fonts Reference to the fonts to use for rendering.
         */
        static void Clay_endDrawing(flecs::iter& iter, size_t, const loaded_fonts& fonts);

        /**
         * @}
         *
         * @name Getters
         * @{
         */

    public:
        /**
         * Get the error codes generated during initialization.
         * @return The error code(s) generated while initializing the framework.
         */
        [[nodiscard]] uint8_t Get_errorCodes() const
        {
            return m_errorCodes_;
        }

        /**
         * @}
         */

    private:
        /**
         * @name Clay members
         * @{
         */
        /**
         * The clay error handler in the framework
         */
        Clay_ErrorHandler m_clay_errorHandler_;
        /**
         * The dimensions of the window as seen by clay
         */
        Clay_Dimensions m_clay_resolution_;
        /**
         * Array of commands to render by clay
         */
        Clay_RenderCommandArray m_clay_renderCommandArray_;
        /**
         * Amount of memory calculated as needed by clay. 
         */
        uint64_t m_clay_requiredMemory_;
        /**
         * clay memory arena
         */
        Clay_Arena m_clay_memoryArena_;

        /**
         * @}
         *
         * @name flecs members
         * @{
         */

        /**
         * unique pointer to the flecs world running under the framework.
         */
        std::unique_ptr<flecs::world> m_world_;

        /**
         * @}
         *
         * @name framework members
         * @{
         */

        /**
         * Error codes generated while initializing
         * @todo modify error codes while in execution?
         */
        uint8_t m_errorCodes_;

        /**
         * Array of loaded fonts to use while rendering text
         */
        Font m_clay_font_[12];

        /**
         * @}
         *
         * @name IO state members
         * @{
         */

        /**
         * Whether the program is full screen
         */
        bool m_fullscreen_mode_ = false;
        /**
         * Store the states of each pressed key.
         */
        bool m_key_states_[256] = {};
        /**
         * Store the states of the mouse
         */
        bool m_mouse_button_states_[3] = {};
        /**
         * How much the mouse wheel got displaced.
         */
        mem_profile_viewer::Vector2 m_mouse_wheel_ = {0, 0};
        /**
         * The state of the keys the frame before
         */
        bool m_old_key_states_[256] = {};
        /**
         * The state of the mouse buttons the frame before
         */
        bool m_old_mouse_button_states_[3] = {};
        /**
         * Whether the window is active.
         */
        bool m_window_is_active_ = false;

        /**
         * @}
         *
         * @name raylib members
         * @{
         */

        /**
         * Background color when clearing the frame
         */
        Color m_raylib_clearColour_ = {255, 255, 255, 255};

        // Window members
        /**
         * Height of the window
         */
        uint32_t m_window_client_height_ = 0;
        /**
         * Width of the window
         */
        uint32_t m_window_client_width_ = 0;

        /**
         * @}
         */
    };
}
